Dynamic programming is a very useful concept into the process of designing of any algorithm. Before diving into the concepts and details on how to apply dynamic programming into your designing process of the algorithms, lets understand from where this term come and what is the story behind it. 
		Dynamic Programming is invented by Richard Bellman (you have heard of him in Bellman-Ford Algorithm and many more). 
The question that always come in mind that why he named the technique so, what is the relation in this naming convention, the real reason behind naming this was to hide the fact that he was doing a mathematical research at that time so in order to hide the fact he named it Dynamic Programming. He was working under some defense related branch whose head hated the term research that's why he did so at that time. In simple words, its just a fancy word for a technique of designing of algorithms.
		Now, coming back to our main topic Dynamic Programming. The very first question arise in mind is that what is 
dynamic programming? Dynamic Programming is a general but powerful algorithm design technique. The reason why i am calling this general because there is nothing hard in applying it in your algorithm, basically it is applying brute force but carefully, in this we need to try all the possibilities in order to write an efficient algorithm that's it. And the reason behind it being powerful is that it can help in reducing the time and space complexity (or making a perfect balance between them) of the algorithm significantly and help in making the algorithm much more efficient.
	In other words we can say that dynamic programming is a way of making an algorithm efficient in terms of its time and 
space complexity. It helps in avoiding repetitive computations in any algorithm which helps in saving the time of the algorithm.
		
		Now,its time to answer the question how to apply the dynamic programming in algorithms. The three main approaches 
to apply the dynamic programming in algorithms is 
1. Recursion
2. Memoization ( != memorization)
3. Bottom-up Approach

Let me explain these terms first then we will dive into an example in order to understand them in depth and will learn how to apply them in all the other problems. 
The recursion approach in nothing fancy just solving the problem with the help of a recursing function, the memoiztion approach is about storing the necessary values which will help in avoiding the repetitive computations which will happen in the recursive only approach and its time complexity is also very efficient, the Bottom-up approach uses all the benefits of the abpve approaches and also save space, its about solving the problem by first solving the initial sub problems and using their results later to solve bigger problems.
	Lets take an example which will give a better understanding about all these approaches and the concepts of dynamic 
programming. Lets take an example of fibonacci series (I am hoping you all know about fibonacci series) in fibonacci sequence the number of any place n is the sum of the numbers at places (n-1) and (n-2) -:

Recursive Approach :- The algorithm to solve this problem with this approach is as follows

		fib(n)
			if n<=2 ; f=1
			else f = fib(n-1) + fib(n-2)

			return f

This is going to take exponential time to complete the recursion. It is not an efficient algorithm. It is also called Naive approach of solving the problem. It contains a lot of repetitive computations which decreses the efficiency of the algorithm.


Memoization Approach:- The memoized dynamic programming algorithm for the fibonacci series is as follows 
		
		memo = { }
		fib(n)
			if n in memo ; return memo[n]
			if n<=2 ; f=1
			else f = fib(n-1) + fib(n-2)
			memo[n] = f

			return f

In this approach, we store the result of the intermediate steps so that they should not be repeatedly computed as in the recursive approach. This approach is very efficient and take linear time in completing the algorithm. Although it takes a little space in the memory but it helps in reducing the running time of the algorithm significantly


Bottom-up Approach:- The bottom-up dynamic programming algorithm for the fibonacci series is as follows

		fib = { }
		for k in range (1, n+1)
			if k<=2 ; f=1
			else f = fib[k-1] + fib[n-2]
				fib[k] = f

		return fib[n]

In this approach, all the things are same as the Memoization approach, the time complexity is same the only major difference is in the space complexity, this approach takes less space in the memory because as it only needs to remember the two members which are less than the required result. In this manner this approach saves space and reduces space complexity of the algorithm.

		In this way, you can apply dynamic programming concept to your algorithms and make them efficient in respect of time
and space. The mantra to apply dynamic programming is to apply brute force of trying all the possibilities but carefully. In summary the dynamic programming can be summarized with the following formula to remember it :-
					Dynamic Programming = Subproblems + Re-use 
